{
  "openapi": "3.0.0",
  "info": {
    "title": "js",
    "version": "1.1.0"
  },
  "servers": [
    {
      "url": "http://{{url}}"
    }
  ],
  "paths": {
    "/bidding": {
      "get": {
        "tags": [
            "default"
        ],
        "summary": "/bidding",
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": "\nconst simulateDelay = (ms) => {\n  var start = new Date().getTime();\n  var end = start;\n  while(end < start + ms) {\n      end = new Date().getTime();\n  }\n}\n\n/**\n * Generates a bid of 10 for the shoes CA, and a bid of 5 otherwise\n */\nfunction generateBid(ad, auction_signals, per_buyer_signals,\n  trusted_bidding_signals, contextual_signals, user_signals,\n  custom_audience_signals) {\n  var bid = 5;\n  if (custom_audience_signals.name === \"shoes\") {\n      bid = 10;\n  }\n  simulateDelay(0);\n  return {'status': 0, 'ad': ad, 'bid': bid };\n}\n\nfunction reportWin(ad_selection_signals, per_buyer_signals, signals_for_buyer,\n contextual_signals, custom_audience_signals) {\n  // Add the address of your reporting server here\n  let reporting_address = 'https://reporting.example.com';\n  simulateDelay(0);\n  return {'status': 0, 'results': {'reporting_uri':\n         reporting_address + '?ca=' + custom_audience_signals.name} };\n}\n"
              }
            }
          }
        }
      }
    },
    "/scoring": {
      "get": {
        "tags": [
            "default"
        ],
        "summary": "/scoring",
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": "\n const simulateDelay = (ms) => {\n   var start = new Date().getTime();\n   var end = start;\n   while(end < start + ms) {\n       end = new Date().getTime();\n   }\n }\n\n\n/**\n * Trivial scoring function -- scores each ad with the value of its bid.\n */\nfunction scoreAd(ad, bid, auction_config, seller_signals, trusted_scoring_signals,\n  contextual_signal, user_signal, custom_audience_signal) {\n  simulateDelay(0);\n  return {'status': 0, 'score': bid };\n}\n\n\nfunction reportResult(ad_selection_config, render_uri, bid, contextual_signals) {\n  // Add the address of your reporting server here\n  let reporting_address = 'https://reporting.example.com';\n  simulateDelay(0);\n  return {'status': 0, 'results': {'signals_for_buyer': '{\"signals_for_buyer\" : 1}'\n          , 'reporting_uri': reporting_address + '?render_uri='\n              + render_uri + '?bid=' + bid } };\n}\n"
              }
            }
          }
        }
      }
    },
    "/bidding/daily": {
      "get": {
        "tags": [
          "default"
        ],
        "summary": "/bidding/daily",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "user_bidding_signals": {
                    "valid": true,
                    "arbitrary": "yes"
                  },
                  "trusted_bidding_data": {
                    "trusted_bidding_uri": "https://js.example.com/bidding/trusted",
                    "trusted_bidding_keys": [
                      "key1",
                      "key2"
                    ]
                  },
                  "ads": [
                    {
                      "render_uri": "https://js.example.com/render/ad1",
                      "metadata": {
                        "valid": 1
                      }
                    },
                    {
                      "render_uri": "https://js.example.com/render/ad2",
                      "metadata": {
                        "valid": 2
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/bidding/trusted": {
      "get": {
        "tags": [
          "default"
        ],
        "summary": "/bidding/trusted",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "valid_signals": true,
                  "arbitrary": "yes"
                }
              }
            }
          }
        }
      }
    }
  }
}
